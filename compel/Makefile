include $(SRC_DIR)/Makefile.versions

.PHONY: .FORCE

COMPEL_SO_VERSION	:= $(COMPEL_SO_VERSION_MAJOR)$(if $(COMPEL_SO_VERSION_MINOR),.$(COMPEL_SO_VERSION_MINOR))$(if $(COMPEL_SO_VERSION_SUBLEVEL),.$(COMPEL_SO_VERSION_SUBLEVEL))
COMPEL_SO_VERSION_CODE	:= $(shell expr $(COMPEL_SO_VERSION_MAJOR) \* 65536 \+ $(COMPEL_SO_VERSION_MINOR) \* 256 \+ $(COMPEL_SO_VERSION_SUBLEVEL))
COMPEL_VERSION_HEADER	:= compel/include/version.h

$(COMPEL_VERSION_HEADER): $(SRC_DIR)/Makefile.versions
	$(call msg-gen, $(COMPEL_VERSION_HEADER))
	$(E) "  GEN     " $@
	$(Q) echo "/* Autogenerated, do not edit */"	 			 	 > $(COMPEL_VERSION_HEADER)
	$(Q) echo "#ifndef COMPEL_SO_VERSION_H__"					>> $(COMPEL_VERSION_HEADER)
	$(Q) echo "#define COMPEL_SO_VERSION_H__"					>> $(COMPEL_VERSION_HEADER)
	$(Q) echo "#define COMPEL_SO_VERSION \"$(COMPEL_SO_VERSION)\""			>> $(COMPEL_VERSION_HEADER)
	$(Q) echo "#define COMPEL_SO_VERSION_MAJOR " $(COMPEL_SO_VERSION_MAJOR)		>> $(COMPEL_VERSION_HEADER)
	$(Q) echo "#define COMPEL_SO_VERSION_MINOR " $(COMPEL_SO_VERSION_MINOR)		>> $(COMPEL_VERSION_HEADER)
	$(Q) echo "#define COMPEL_SO_VERSION_SUBLEVEL " $(COMPEL_SO_VERSION_SUBLEVEL)	>> $(COMPEL_VERSION_HEADER)
	$(Q) echo "#define COMPEL_SO_VERSION_CODE " $(COMPEL_SO_VERSION_CODE)		>> $(COMPEL_VERSION_HEADER)
	$(Q) echo "#endif /* COMPEL_SO_VERSION_H__ */"					>> $(COMPEL_VERSION_HEADER)

ifneq ($(filter-out clean mrproper,$(MAKECMDGOALS)),)
        $(obj)/%: $(COMPEL_VERSION_HEADER)
endif

ccflags-y		+= -iquote compel/src/lib/arch/$(ARCH)/include
ccflags-y		+= -iquote compel/include
ccflags-y		+= -iquote compel/plugins/include
ccflags-y		+= -iquote $(SRC_DIR)/criu/include
ccflags-y		+= -fPIC

lib-y			+= src/lib/handle-elf.o
lib-y			+= src/lib/arch/$(ARCH)/handle-elf.o
lib-y			+= src/lib/handle-elf-32.o

obj-y			+= src/main.o

CFLAGS_handle-elf-32.o += -UCONFIG_X86_64 -DCONFIG_X86_32
CFLAGS_handle-elf-32.d += -UCONFIG_X86_64 -DCONFIG_X86_32

cleanup-y		+= compel/compel
cleanup-y		+= compel/libcompel.so

#plugins-y		+= std

#define gen-plugin-rule
#$(info MAKECMDGOALS=$(MAKECMDGOALS))
#$(obj)/plugins/$(1)/%: .FORCE
#	$$(Q) $$(MAKE) $$(build)=$(obj)/plugins/$(1) $$@
#$(1)-clean:
#	$$(Q) $$(MAKE) $$(build)=$(obj)/plugins/$(1) clean
#.PHONY: $(obj)/plugins/$(1)-clean
#endef

#$(foreach i,$(plugins-y),$(eval $(call gen-plugin-rule,$(i))))
#clean: $(patsubst %,%-clean,$(plugins-y))
